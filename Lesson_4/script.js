// https://codeguida.com/post/199
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from?retiredLocale=uk





const arr = [1, 2, 3, 4];
const arr1 = [5, 6, 7, 8];
const arr2 = [8, 9, 10, 11]

// sum(arr)
// sum(arr1)
// sum(arr2)

// function sum(item){
//     for (let i = 0; i < item.length; i += 1) {
//         item[i] = item[i] * 2;
//     }
//     console.log(item);
// }


// declaration
// function name(){

// }

// expression
// sum(arr)
// sum(arr1)
// sum(arr2)
// const sum = function (item) {
//     for (let i = 0; i < item.length; i += 1) {
//         item[i] = item[i] * 2;
//     }
//     console.log(item);
// }



// function add() {
//     let sum = 0;
//     // const arr = Array.from(arguments);
//     const arr = [...arguments]

//     console.log(arguments);
//     console.log(arr);
//     // for (let i = 0; i < arguments.length; i += 1) {
//     //     sum += arguments[i]
//     // }
//     for(const value of arguments){
//         sum +=value
//     }
//     console.log(sum);
//     // console.log(val + val1 + val2 + val3 + val4 + val5);
// }
// add(1, 2, 3, 4, 5, 6)
// add(1, 2, 3, 4)
// add(1, 2, 3, 4, 5);







// function add() {
//     let sum = 0;
//     for (const value of arguments) {
//         sum += value;

//     }
//     return sum;

// }
// const response = add(1, 2, 3, 4, 5, 6);
// console.log(response);
// // add(1, 2, 3, 4)
// // add(1, 2, 3, 4, 5);




// function largeNumber() {
//     let sum = 0;
//     for (const value of arguments) {
//         sum += value;
//         if (sum > 10) {
//             return true;
//         }
//     }
//     return false;

// }
// const response = largeNumber(1, 2, 3);
// console.log(response); //6 false
// console.log(largeNumber(1, 2, 3, 4)); //10 false
// console.log(largeNumber(1, 2, 3, 4, 5, 6)); // 15 true



// function add(val, val1 = 0) {
//     console.log("val", val);
//     console.log("val1", val1);
//     return val + val1

// }
// console.log(add(3, 4));
// console.log(add(5, 12));
// console.log(add(11));

// let a = 10

// function foo() {
//     a = 15
// }
// foo()
// console.log(a);



// let a = 10

// function foo() {
//     let a = 15;
//     a = 45;
// }
// foo()
// console.log(a);


// let a = 10

// function foo() {
//     a = 45;
//     let a = 15;
// }
// foo()
// console.log(a);



// let a = 10

// function foo(a) {
//     a = 45
// }
// foo(a)
// console.log(a);

// const test = [1, 2, 3];

// function foo(arr) {
//     arr.splice(0, 1)
// }

// foo(test)
// console.log(test);


// function createString(name, year) {
//     // const result = add(year);
//     return `${name} years ${add(year)}`
// }
// console.log(createString('Mango', [1, 2, 3]));

// function add(arr) {
//     let sum = 0;
//     for (const num of arr) {
//         sum += num;
//     }
//     return sum;
// }


// function foo() {
//     boo()
// }
// foo()

// function boo() {
//     foo()
// }


// –ü–µ—Ä–µ—Ä–≤–∞ –¥–æ 21.05





















// Example 1 - –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é calcBMI(weight, height) —è–∫–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –ª—é–¥–∏–Ω–∏. –î–ª—è —Ü—å–æ–≥–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –≤–∞–≥—É –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç –≤–∏—Å–æ—Ç–∏ –ª—é–¥–∏–Ω–∏ –≤ –º–µ—Ç—Ä–∞—Ö.

// –í–∞–≥–∞ —Ç–∞ –≤–∏—Å–æ—Ç–∞ –±—É–¥—É—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ —è–∫ —Ä—è–¥–∫–∏. –ù–µ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞–¥–∞–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ 24.7 –∞–±–æ 24,7, —Ç–æ–±—Ç–æ —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –¥—Ä–æ–±–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ–º–∞.

// –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç–∏ –¥–æ –æ–¥–Ω—ñ—î—ó —Ü–∏—Ñ—Ä–∏ –ø—ñ—Å–ª—è –∫—Ä–∞–ø–∫–∏;

// function calcBMI(weight, height) {
//     weight = Number(weight.replace(',', '.'));
//     height = Number(height.replace(',', '.'));

//     // return Number((weight / Math.pow(height, 2)).toFixed(1));
//     return Number((weight / height ** 2).toFixed(1))
// }

// const bmi = calcBMI('88,3', '1.75');
// console.log(bmi); // 28.8

// const num = 2.56
// console.log(num.toFixed(1));


// Example 2 - –ù–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é min(a,b), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª a —Ç–∞ b.

// function min(a, b) {
//     // if (a > b) {
//     //     return b;
//     // }

//     // return a;

//     return a > b ? b : a
// }




// console.log(min(2, 5)); // 2
// console.log(min(3, -1)); // -1
// console.log(min(1, 1)); // 1






// Example 3 - –ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getRectArea(dimensions) –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ dimensions —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞. –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.

// function getRectArea(dimensions) {
//     dimensions = dimensions.split(' ');

//     // const first = Number(dimensions[0])
//     // const second = Number(dimensions[1])

//     // return first * second;

//     return Number(dimensions[0]) * Number(dimensions[1])
//     // console.log(second);
// }

// console.log(getRectArea('8 11'));
// console.log(getRectArea('46 11'));
// console.log(getRectArea('8 112'));

// Example 4 - –õ–æ–≥—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é logItems(items), —è–∫–∞ –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–∏–∫–ª for, —è–∫–∏–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –±—É–¥–µ –≤–∏–≤–æ–¥–∏—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ <–Ω–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞> - <–∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞>. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.

// –ù–∞–ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É ['Mango', 'Poly', 'Ajax'] –∑ —ñ–Ω–¥–µ–∫—Å–æ–º 0 –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ 1 - Mango, –∞ –¥–ª—è —ñ–Ω–¥–µ–∫—Å—É 2 - "Poly" –≤–∏–≤–µ–¥–µ 3 - Ajax.

// function logItems(items) {
//     for (let i = 0, num = 1; i< items.length; i+=1, num+=1){
//         console.log(`${num} - ${items[i]}`);
//     }
// }

// logItems(['Mango', 'Poly', 'Ajax']);
// logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);

// Example 5 - –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é printContactsInfo(names, phones) —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ names —Ç–∞ phones –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.

// function printContactsInfo(names, phones) {
//     names = names.split(',')
//     phones = phones.split(',')
//     console.log(phones);
//     for (let i = 0; i < names.length, i < phones.length; i += 1) {
//         console.log(`${names[i]} - ${phones[i]}`);
//     }
// }



const arr11 = ['a','b','c'];
const idx = arr11.indexOf('a');
if(!!~idx){
    console.log('YES');
}else{
    console.log('NO');
}
console.log(idx);
console.log(!!-(idx + 1));
console.log(!!~idx);
console.log(Boolean(~idx));


// printContactsInfo(
//     'Jacob,William,Solomon,Artem',
//     '89001234567,89001112233,890055566377,890055566300'
// );


// Example 6 - –ü–æ—à—É–∫ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é findLargestNumber(numbers)—è–∫–∞ —à—É–∫–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ.

// function findLargestNumber() {
//     // const arr = Array.from(arguments)
//     const arr = [...arguments];
//     let max = arr[0];

//     for (const num of arr) {
//         if (num > max) {
//             max = num
//         }
//     }

//     return max
// }

// console.log(findLargestNumber(2, 17, 94, 1, 23, 37)); // 94
// console.log(findLargestNumber(49, 4, 7, 83, 12)); // 83



// function findLargestNumber() {
//     let max;
//     for (const num of arguments) {
//         if (typeof num === 'number') {
//             max = num;
//             break;
//         }
//     }
//     for (const num of arguments) {
//         if (typeof num === 'number') {
//             if (num > max) {
//                 max = num
//             }
//         } else {
//             max = findLargestNumber(...num)
//             //[1, 143], 5, 7
//             max = findLargestNumber(...num)// 143
//             //[1, 143] => 1,143
//             max = findLargestNumber(...num)
//         }
//     }
//     return max
// }
// console.log(findLargestNumber([[1, 143], 5, 7], 6, 7, 899, 88, 123))



// Example 7 - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é calAverage() —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö–Ω—î —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è. –£—Å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –±—É–¥—É—Ç—å –ª–∏—à–µ —á–∏—Å–ª–∞–º–∏.

// function calAverage() {
//     let total = 0;
//     for (const num of arguments) {
//         total += num;
//     }

//     return total / arguments.length
// }

// console.log(calAverage(1, 2, 3, 4)); // 2.5
// console.log(calAverage(14, 8, 2)); // 8
// console.log(calAverage(27, 43, 2, 8, 36)); // 23.2


// Example 8 - –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é formatTime(minutes) —è–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è minutes (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω) —É —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –≥–æ–¥–∏–Ω —Ç–∞ —Ö–≤–∏–ª–∏–Ω HH:MM.


// function formatTime(minutes) {
//     const hours = Math.floor(minutes / 60);
//     minutes = minutes % 60;
//   return `${hours.toString().padStart(2,'0')} : ${minutes.toString().padStart(2,'0')}`
// }

// console.log(formatTime(70)); // "01:10"
// console.log(formatTime(450)); // "07:30"
// console.log(formatTime(1441)); // "24:01"




// Example 9 - –ö–æ–ª–µ–∫—Ü—ñ—è –∫—É—Ä—Å—ñ–≤ (includes, indexOf, push —ñ —Ç. –¥.)
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ courses:

// addCourse(name) - –¥–æ–¥–∞—î –∫—É—Ä—Å –¥–æ –∫—ñ–Ω—Ü—è –∫–æ–ª–µ–∫—Ü—ñ—ó
// removeCourse(name) - –≤–∏–¥–∞–ª—è—î –∫—É—Ä—Å —ñ–∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
// updateCourse(oldName, newName) - –∑–º—ñ–Ω—é—î —ñ–º'—è –Ω–∞ –Ω–æ–≤–µ
const courses = ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL'];

function addCourse(course) {
    if (courses.includes(course)) {
        return '–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Ç–∞–∫–∏–π –∫—É—Ä—Å';
    }

    courses.push(course)
}



// addCourse('Express');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL', 'Express']
// console.log(addCourse('CSS')); // '–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Ç–∞–∫–∏–π –∫—É—Ä—Å'

// function removeCourse(course) {
//     if (courses.includes(course)) {
//         const idx = courses.indexOf(course)
//         courses.splice(idx, 1);

//         return
//     }

//     return "–ö—É—Ä—Å —ñ–∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
// }
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT
// !!~courses.indexOf(course); 0 => false
//        -1 => true
// -(0 + 1) -1 => true
//  -(-1 + 1) -0 => false
//    courses.includes(course)
// !!  === Boolean()
// console.log(!!~1);

// function removeCourse(course) {
//     const idx = courses.indexOf(course);
//     if (!!~idx) {
//         courses.splice(idx, 1);
//         return;
//     }
//     return "–ö—É—Ä—Å —ñ–∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
// }


// removeCourse('React');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'Express']
// console.log(removeCourse('Vue'));; // '–ö—É—Ä—Å —ñ–∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'




// function updateCourse(oldCourse, newCourse) {
//     const idx = courses.indexOf(oldCourse);
//     if (!!~idx) {
//         courses.splice(idx, 1, newCourse);
//         return;
//     }

//     return "–ö—É—Ä—Å —ñ–∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ";

// }




// updateCourse('Express', 'NestJS');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'NestJS']
// console.log(updateCourse('Express', 'NestJS'));


